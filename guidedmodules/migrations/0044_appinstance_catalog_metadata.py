# Generated by Django 2.0.5 on 2018-05-22 18:56

from django.db import migrations
import jsonfield.fields
from guidedmodules.models import extract_catalog_metadata, recombine_catalog_metadata

def move_catalog_data(apps, schema_editor):
    # Migrate the catalog information in the 'app' module of each AppInstance
    # to the AppInstance's new catalog_metadata field, making it easier to
    # find. The field will also be created with the empty string as its
    # default value, which is not valid JSON, so we must initialize it with
    # valid JSON.
    Module = apps.get_model("guidedmodules", "Module")
    for app_module in Module.objects\
        .filter(module_name="app")\
        .exclude(app=None)\
        .select_related("app"):
        extract_catalog_metadata(app_module, migration='0044')
        app_module.save(update_fields=['spec'])
        app_module.app.save(update_fields=['catalog_metadata'])

def restore_catalog_data(apps, schema_editor):
    # Migrate the catalog information back to the 'app' module.
    Module = apps.get_model("guidedmodules", "Module")
    for app_module in Module.objects\
        .filter(module_name="app")\
        .exclude(app=None)\
        .select_related("app"):
        app_module.spec['catalog'] = recombine_catalog_metadata(app_module)
        app_module.save(update_fields=['spec'])

class Migration(migrations.Migration):

    dependencies = [
        ('guidedmodules', '0043_auto_20180522_1853'),
    ]

    operations = [
        migrations.AddField(
            model_name='appinstance',
            name='catalog_metadata',
            field=jsonfield.fields.JSONField(blank=True, help_text="The catalog metadata that was stored in the 'app' module."),
        ),
        migrations.RunPython(move_catalog_data, restore_catalog_data),
    ]

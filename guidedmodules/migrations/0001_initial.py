# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-03 23:02
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.CharField(help_text="The ID of the question (with the Task's module) that this Answer answers.", max_length=128)),
                ('value', jsonfield.fields.JSONField(blank=True, help_text='The actual answer value for the Question, or None/null if the question is not really answered yet.')),
                ('notes', models.TextField(blank=True, help_text='Notes entered by the user completing this Answer.')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, help_text='Additional information stored with this object.')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emoji', models.CharField(blank=True, help_text='The name of an emoji that the user is reacting with.', max_length=64, null=True)),
                ('text', models.TextField(blank=True, help_text="The text of the user's comment.")),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, help_text='Additional information stored with this object.')),
                ('target', models.ForeignKey(help_text='The Answer that this comment is attached to.', on_delete=django.db.models.deletion.CASCADE, to='guidedmodules.Answer')),
                ('user', models.ForeignKey(help_text='The user making a comment.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.CharField(blank=True, help_text='The ID of the question that prompted the invitation.', max_length=64, null=True)),
                ('to_email', models.CharField(blank=True, help_text='The email address the invitation was sent to, if to a non-existing user.', max_length=256, null=True)),
                ('text', models.TextField(blank=True, help_text='The personalized text of the invitation.')),
                ('sent_at', models.DateTimeField(blank=True, help_text='If the invitation has been sent by email, when it was sent.', null=True)),
                ('accepted_at', models.DateTimeField(blank=True, help_text='If the invitation has been accepted, when it was accepted.', null=True)),
                ('email_invitation_code', models.CharField(blank=True, help_text='For emails, a unique verification code.', max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, help_text='Additional information stored with this object.')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this Project.', max_length=256)),
                ('notes', models.TextField(blank=True, help_text='Notes about this Project for Project members.')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, help_text='Additional information stored with this object.')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(default=False, help_text='Is the user an administrator of the Project?')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('project', models.ForeignKey(help_text='The Project this is defining membership for.', on_delete=django.db.models.deletion.CASCADE, related_name='members', to='guidedmodules.Project')),
                ('user', models.ForeignKey(help_text='The user that is a member of the Project.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_id', models.CharField(help_text='The ID of the module being completed.', max_length=128)),
                ('title', models.CharField(help_text='The title of this Task. If the user is performing multiple tasks for the same module, this title would distiguish the tasks.', max_length=256)),
                ('notes', models.TextField(blank=True, help_text='Notes set by the user about why they are completing this task.')),
                ('requestor_notes', models.TextField(blank=True, help_text='A message from the requesting user to the user of this Task.')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, help_text='Additional information stored with this object.')),
                ('project', models.ForeignKey(blank=True, help_text='The Project that this Task is a part of, or empty for Tasks that are just directly owned by the user.', null=True, on_delete=django.db.models.deletion.CASCADE, to='guidedmodules.Project')),
                ('requested_by', models.ForeignKey(blank=True, help_text='The Task (and its user) which is requesting that this Task be completed, if applicable. Answers are inherited from this Task if there is no Answer for a particular question in this Task.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='guidedmodules.Task')),
                ('user', models.ForeignKey(help_text='The user that is working on this task.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='invitation',
            name='accepted_task',
            field=models.ForeignKey(blank=True, help_text='The Task generated by accepting the invitation.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitations_received', to='guidedmodules.Task'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='accepted_user',
            field=models.ForeignKey(blank=True, help_text='The user that accepted the invitation (i.e. if the invitation was by email address).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitations_accepted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invitation',
            name='from_task',
            field=models.ForeignKey(help_text='The Task that prompted the invitation.', on_delete=django.db.models.deletion.CASCADE, related_name='invitations_sent', to='guidedmodules.Task'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='from_user',
            field=models.ForeignKey(help_text='The user who sent the invitation.', on_delete=django.db.models.deletion.CASCADE, related_name='invitations_sent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invitation',
            name='invite_to_project',
            field=models.ForeignKey(blank=True, help_text='The Project that the user being invited is being invited to join, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitations_sent', to='guidedmodules.Project'),
        ),
        migrations.AddField(
            model_name='invitation',
            name='to_user',
            field=models.ForeignKey(blank=True, help_text='The user who the invitation was sent to, if to an existing user.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invitations_received', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='task',
            field=models.ForeignKey(help_text='The Task that this Answer is for.', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='guidedmodules.Task'),
        ),
        migrations.AlterIndexTogether(
            name='task',
            index_together=set([('project', 'user', 'module_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectmembership',
            unique_together=set([('project', 'user')]),
        ),
        migrations.AlterIndexTogether(
            name='comment',
            index_together=set([('user', 'target')]),
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together=set([('task', 'question_id')]),
        ),
    ]
